#include "../../include/characters/enemy.h"
#include <iostream>
#include <thread>
#include <vector>

constexpr unsigned int vectorEnemy1[19][30] = {
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xff040404, 0xff040404, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xff040404, 0xff040404, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00},
    {0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac},
    {0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00},
    {0xffacacac, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffacacac},
    {0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00},
    {0xffacacac, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffacacac},
    {0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00},
    {0xffacacac, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xff040404, 0xff040404, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffacacac},
    {0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00},
    {0xffacacac, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffacacac},
    {0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffff7f00},
    {0xffacacac, 0xffffa500, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff0000, 0xffffffff, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffffffff, 0xffff0000, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffffa500, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff0000, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffff7f00, 0xffff7f00, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
};

constexpr unsigned int vectorEnemy2[22][26] = {
    {0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xff040404, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xff040404, 0xff800080, 0xffacacac},
    {0xff800080, 0xff040404, 0xffffffff, 0xffffffff, 0xff040404, 0xff040404, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xffffffff, 0xffffffff, 0xff040404, 0xff800080},
    {0xff800080, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xffffffff, 0xff040404, 0xff040404, 0xff800080},
    {0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xff040404, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff040404, 0xff040404, 0xff040404, 0xff800080, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff000000, 0xff800080, 0xff800080, 0xff000000, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac},
    {0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac},
    {0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac},
    {0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xffacacac, 0xff800080, 0xff800080, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff1e1eff, 0xff800080, 0xff800080, 0xffacacac, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xffffffff, 0xff1e1eff, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac},
    {0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xff800080, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac, 0xffacacac}};

constexpr int vectorExplosion[14][15] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}, {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}, {2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}, {0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0}};

Enemy::Enemy(float x, float y, int type)
    : x(x), y(y), type(type), active(true)
{
    std::cout << "Enemy created\nx: " << x << "\ny: " << y << std::endl;
}

void Enemy::drawSquare(float _x, float _y, float size)
{
    _x = _x * size + x;
    _y = _y * size + y;

    glBegin(GL_QUADS);
    glVertex2f(_x, _y);
    glVertex2f(_x + size, _y);
    glVertex2f(_x + size, _y + size);
    glVertex2f(_x, _y + size);
    glEnd();
}

void Enemy::draw()
{
    if (!active)
        return;

    if (type == 0)
    {
        for (int i = 0; i < 19; ++i)
        {
            for (int j = 0; j < 30; ++j)
            {
                if (vectorEnemy1[i][j] != 0xffacacac)
                {
                    unsigned int color = vectorEnemy1[i][j];
                    glColor3f(((color >> 16) & 0xFF) / 255.0f,
                              ((color >> 8) & 0xFF) / 255.0f,
                              (color & 0xFF) / 255.0f);
                    drawSquare(j, 18 - i);
                }
            }
        }
    }
    else
    {
        for (int i = 0; i < 22; ++i)
        {
            for (int j = 0; j < 26; ++j)
            {
                if (vectorEnemy2[i][j] != 0xffacacac)
                {
                    unsigned int color = vectorEnemy2[i][j];
                    glColor3f(((color >> 16) & 0xFF) / 255.0f,
                              ((color >> 8) & 0xFF) / 255.0f,
                              (color & 0xFF) / 255.0f);
                    drawSquare(j, 21 - i);
                }
            }
        }
    }
}

void Enemy::drawExplosion()
{
    for (int i = 0; i < 14; ++i)
    {
        for (int j = 0; j < 15; ++j)
        {
            if (vectorExplosion[i][j] == 1)
            {
                glColor3f(1.0f, 0.5f, 0.0f);
                drawSquare(j, i);
            }
            else if (vectorExplosion[i][j] == 2)
            {
                glColor3f(1.0f, 0.0f, 0.0f);
                drawSquare(j, i);
            }
        }
    }
}

void Enemy::move(float speed, bool &start)
{
    while (active)
    {
        y -= speed;
        if (y < 0)
        {
            active = false;
            start = false;
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

bool Enemy::isActive() const
{
    return active;
}

float Enemy::getX() const
{
    return x;
}

float Enemy::getY() const
{
    return y;
}

int Enemy::getType() const
{
    return type;
}

void Enemy::setActive(bool state)
{
    active = state;
}